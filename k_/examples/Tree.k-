let proc leaf (i) = {left := -1, v := i, right := -1} in (* leaf tree *)
let proc makeLtree (i, t) = {left := t, v := i, right := -1} in (* tree with only left subtree *)
let proc makeRtree (i, t) = {left := -1, v := i, right := t} in (* tree with only right subtree *)
let proc makeTree (i, lt, rt) = {left := lt, v := i, right := rt} in (* tree with both subtrees *)
let proc isLeaf (t) =
if t.left = -1 then
  if t.right = -1 then true else false
else false in (* see if leaf tree *)

let proc isLtree (t) =
if not (t.left = -1) then
  if t.right = -1 then true else false
else false in (* see if tree with only left subtree *)

let proc isRtree (t) =
if not (t.right = -1) then
   if t.left = -1 then true else false
else false in (* see if tree with only right subtree *)

let proc isLRtree (t) = if not (t.left = -1) then 
   if not (t.right = -1) then true else false
else false in (* see if tree with both subtrees *)

let proc rTree (t) = t.right in (* right subtree *)
let proc lTree (t) = t.left in (* left subtree *)
let proc nodeVal (t) = t.v in (* node value *)
let proc dft (t) = () in (* print node values in depth-first order *)
let proc bft (t) = () in (* print node values in breath-first order *)
(* in 2025 *)